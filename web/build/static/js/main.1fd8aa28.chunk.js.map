{"version":3,"sources":["assets/images/tank.png","assets/images/tank-unselected.png","assets/images/dps.png","assets/images/dps-unselected.png","assets/images/healer.png","assets/images/healer-unselected.png","components/playerFormModal.js","components/providers/images.js","components/providers/imageStyles.js","components/playerCard.js","components/renderPlayers.js","components/providers/databasePlaceholder.js","components/providers/PlayerContext.js","components/providers/BaseAppLogic.js","components/ValidGroup.js","components/groupRoll.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","PlayerFormModal","visible","close","player","updatePlayer","addPlayer","arrayLength","removePlayer","useState","name","setName","tank","setTank","dps","setDps","healer","setHealer","effect","onSubmit","e","preventDefault","p","locked","in","updatedPlayer","id","newPlayer","type","value","onChange","target","checked","onClick","images","tankUnselected","dpsUnselected","healerUnselected","roleLogo","height","width","PlayerCard","style","updateRoles","roleToUpdate","newBoolean","useEffect","src","alt","RenderPlayers","players","setPlayers","modalOpen","setModalOpen","newPlayers","filter","updatedPlayers","map","Players","styles","card","key","cardContainer","length","display","flexDirection","flexWrap","playersPlaceHolder","PlayerContext","createContext","countRoles","playersArray","tanks","reduce","n","healers","GetAGroup","inGroup","valid","setTanks","setHealers","roleCounts","GroupRoll","setRollGroup","outOfGroup","setOutOfGroup","rollForRole","role","arrayOfPlayers","group","randomFromArray","Math","floor","random","removePickFromGroup","pickedPlayer","remainingPlayers","rollForDps","newDPS","dpsCount","pickedDPS","push","RenderDPS","OutOfGroup","console","log","disabled","t","h","d","App","playerContext","useContext","setValid","setInGroup","roleCount","rolesValid","validCheck","className","Provider","ValidGroup","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"6FAAAA,EAAOC,QAAU,IAA0B,kC,gBCA3CD,EAAOC,QAAU,IAA0B,6C,gBCA3CD,EAAOC,QAAU,IAA0B,iC,gBCA3CD,EAAOC,QAAU,IAA0B,4C,gBCA3CD,EAAOC,QAAU,IAA0B,oC,gBCA3CD,EAAOC,QAAU,IAA0B,+C,yJCmG5BC,EAhGS,SAAC,GAQlB,IAPLC,EAOI,EAPJA,QACAC,EAMI,EANJA,MACAC,EAKI,EALJA,OACAC,EAII,EAJJA,aACAC,EAGI,EAHJA,UACAC,EAEI,EAFJA,YACAC,EACI,EADJA,aACI,EACoBC,mBAASL,EAASA,EAAOM,KAAO,IADpD,mBACGA,EADH,KACSC,EADT,OAGoBF,qBAASL,GAASA,EAAOQ,MAH7C,mBAGGA,EAHH,KAGSC,EAHT,OAKkBJ,qBAASL,GAASA,EAAOU,KAL3C,mBAKGA,EALH,KAKQC,EALR,OAOwBN,qBAASL,GAASA,EAAOY,QAPjD,mBAOGA,EAPH,KAOWC,EAPX,KAoCJ,OACE,kBAAC,IAAD,CAAOf,QAASA,EAASgB,OAAO,YAC9B,0BAAMC,SAvBW,SAACC,GACpBA,EAAEC,iBACF,IAAMC,EAAI,CACRZ,OACAE,OACAE,MACAE,SACAO,QAAQ,EACRC,IAAI,GAEN,GAAIpB,EAAQ,CACV,IAAMqB,EAAa,eAAQH,EAAR,CAAWI,GAAItB,EAAOsB,KACzCrB,EAAaoB,OACR,CACL,IAAMC,EAAKnB,EAAc,EACnBoB,EAAS,eAAQL,EAAR,CAAWI,OAC1BpB,EAAUqB,GArBZhB,EAAQ,IACRE,GAAQ,GACRE,GAAO,GACPE,GAAU,KA0BN,wCACA,2BACEW,KAAK,OACLC,MAAOnB,EACPoB,SAAU,SAACV,GAAD,OAAOT,EAAQS,EAAEW,OAAOF,UAEpC,wCACA,2BACED,KAAK,WACLI,QAASpB,EACTF,KAAK,OACLoB,SAAU,WACRjB,GAASD,MAGb,uCACA,2BACEgB,KAAK,WACLI,QAASlB,EACTJ,KAAK,MACLoB,SAAU,WACRf,GAAQD,MAGZ,0CACA,2BACEc,KAAK,WACLI,QAAShB,EACTN,KAAK,SACLoB,SAAU,WACRb,GAAWD,MAGdZ,EACC,4BACE6B,QAAS,WACPzB,EAAaJ,EAAOsB,MAFxB,UAOE,KACJ,4BAAQO,QAAS9B,GAAjB,SACA,2BAAOyB,KAAK,c,oGCtFPM,EAAS,CACpBtB,SACAuB,mBACArB,QACAsB,kBACApB,WACAqB,sBCbWC,EAAW,CACtBC,OAAQ,OACRC,MAAO,QCoEMC,EAjEI,SAAC,GAAmD,IAAjDrC,EAAgD,EAAhDA,OAAsBC,GAA0B,EAAxCG,aAAwC,EAA1BH,cAAcqC,EAAY,EAAZA,MAAY,EAClCjC,oBAAS,GADyB,gCAG5CA,mBAASL,EAAOQ,OAH4B,mBAG7DA,EAH6D,KAGvDC,EAHuD,OAK9CJ,mBAASL,EAAOU,KAL8B,mBAK7DA,EAL6D,KAKxDC,EALwD,OAMxCN,mBAASL,EAAOY,QANwB,mBAM7DA,EAN6D,KAMrDC,EANqD,KAkB9D0B,EAAc,SAACC,EAAcC,GACjC,IAAMpB,EAAa,eAAQrB,GAC3BqB,EAAcmB,GAAgBC,EAC9BxC,EAAaoB,IAIf,OADAqB,qBAAU,cAAU,CAAC1C,IAEnB,yBAAKsC,MAAOA,GACV,uCAAatC,EAAOM,MACpB,0CACA,2BAAOkB,KAAK,WAAWI,QAAS5B,EAAOmB,OAAQO,SArB9B,WACnB,IAAMR,EAAC,eAAQlB,EAAR,CAAgBmB,QAASnB,EAAOmB,SACvClB,EAAaiB,MAoBX,+CACA,2BAAOM,KAAK,WAAWI,QAAS5B,EAAOoB,GAAIM,SAlB9B,WACf,IAAMR,EAAC,eAAQlB,EAAR,CAAgBoB,IAAKpB,EAAOoB,KACnCnB,EAAaiB,MAiBX,6BACE,yBACEoB,MAAOJ,EACPS,IAAK3C,EAAOQ,KAAOsB,EAAOtB,KAAOsB,EAAOC,eACxCa,IAAI,YACJf,QAAS,WACPpB,GAASD,GACT+B,EAAY,QAAS/B,MAGzB,yBACE8B,MAAOJ,EACPS,IAAK/B,EAASkB,EAAOlB,OAASkB,EAAOG,iBACrCW,IAAI,cACJf,QAAS,WACPhB,GAAWD,GACX2B,EAAY,UAAW3B,MAG3B,yBACE0B,MAAOJ,EACPS,IAAKjC,EAAMoB,EAAOpB,IAAMoB,EAAOE,cAC/BY,IAAI,WACJf,QAAS,WACPlB,GAAQD,GACR6B,EAAY,OAAQ7B,SCLjBmC,EArDO,SAAC,GAA6B,IAA3BC,EAA0B,EAA1BA,QAASC,EAAiB,EAAjBA,WAAiB,EACf1C,oBAAS,GADM,mBAC1C2C,EAD0C,KAC/BC,EAD+B,KAG3C7C,EAAe,SAACkB,GACpB,IAAM4B,EAAaJ,EAAQK,QAAO,SAACnD,GAAD,OAAYA,EAAOsB,KAAOA,KAC5DyB,EAAWG,IAGPjD,EAAe,SAACoB,GACpB,IAAM+B,EAAiBN,EAAQO,KAAI,SAACnC,GAClC,OAAIA,EAAEI,KAAOD,EAAcC,GACVD,EAGRH,KAGX6B,EAAWK,GACXH,GAAa,IASTK,EAAU,kBACdR,EAAQO,KAAI,SAACrD,GAAD,OACV,kBAAC,EAAD,CACEsC,MAAOiB,EAAOC,KACdC,IAAKzD,EAAOsB,GACZtB,OAAQA,EACRI,aAAcA,EACdH,aAAcA,QAGpB,OACE,yBAAKqC,MAAOiB,EAAOG,eACjB,kBAACJ,EAAD,MACA,6BACA,6BACA,kBAAC,EAAD,CACEtD,OAAQ,KACRF,QAASkD,EACTjD,MAAO,kBAAMkD,GAAa,IAC1B/C,UAzBY,SAACqB,GACjB,IAAM2B,EAAU,sBAAOJ,GAAP,CAAgBvB,IAChCwB,EAAWG,GACXD,GAAa,IAuBT9C,YAAa2C,EAAQa,SAEvB,4BAAQ9B,QAAS,kBAAMoB,GAAcD,KAArC,gBAMAO,EAAS,CACbC,KAAM,CACJpB,MAAO,MACPD,OAAQ,QAEVuB,cAAe,CACbE,QAAS,OACTC,cAAe,MACfC,SAAU,SCjEDC,EAAqB,CAChC,CACEzD,KAAM,QACNE,MAAM,EACNE,KAAK,EACLE,QAAQ,EACRO,QAAQ,EACRC,IAAI,EACJE,GAAI,GAEN,CACEhB,KAAM,QACNE,MAAM,EACNE,KAAK,EACLE,QAAQ,EACRO,QAAQ,EACRC,IAAI,EACJE,GAAI,GAEN,CACEhB,KAAM,QACNE,MAAM,EACNE,KAAK,EACLE,QAAQ,EACRO,QAAQ,EACRC,IAAI,EACJE,GAAI,GAEN,CACEhB,KAAM,OACNE,MAAM,EACNE,KAAK,EACLE,QAAQ,EACRO,QAAQ,EACRC,IAAI,EACJE,GAAI,GAEN,CACEhB,KAAM,QACNE,MAAM,EACNE,KAAK,EACLE,QAAQ,EACRO,QAAQ,EACRC,IAAI,EACJE,GAAI,GAEN,CACEhB,KAAM,SACNE,MAAM,EACNE,KAAK,EACLE,QAAQ,EACRO,QAAQ,EACRC,IAAI,EACJE,GAAI,GAEN,CACEhB,KAAM,QACNE,MAAM,EACNE,KAAK,EACLE,QAAQ,EACRO,QAAQ,EACRC,IAAI,EACJE,GAAI,IC3DO0C,EAFOC,wBAAcF,GCUvBG,EAAa,SAACC,GAUzB,MAAO,CAAEC,MATKD,EAAaE,QAAO,SAACC,EAAGtE,GACpC,OAAOsE,IAAqB,IAAhBtE,EAAOQ,OAA+B,IAAdR,EAAOoB,MAC1C,GAOamD,QANAJ,EAAaE,QAAO,SAACC,EAAGtE,GACtC,OAAOsE,IAAuB,IAAlBtE,EAAOY,SAAiC,IAAdZ,EAAOoB,MAC5C,GAIsBV,IAHbyD,EAAaE,QAAO,SAACC,EAAGtE,GAClC,OAAOsE,IAAoB,IAAftE,EAAOU,MAA8B,IAAdV,EAAOoB,MACzC,KCUUoD,EA7BG,SAAC,GAAiC,IAA/B1B,EAA8B,EAA9BA,QAAS2B,EAAqB,EAArBA,QAASC,EAAY,EAAZA,MAAY,EACvBrE,mBAAS,GADc,mBAC1C+D,EAD0C,KACnCO,EADmC,OAE3BtE,mBAAS,GAFkB,mBAE1CK,EAF0C,KAErCC,EAFqC,OAGnBN,mBAAS,GAHU,mBAG1CkE,EAH0C,KAGjCK,EAHiC,KAWjD,OANAlC,qBAAU,WACR,IAAMmC,EAAaX,EAAWpB,GAC9B6B,EAASE,EAAWT,OACpBzD,EAAOkE,EAAWnE,KAClBkE,EAAWC,EAAWN,WACrB,CAACzB,IAEF,oCACE,iDAAuBsB,GACvB,+CAAqB1D,GACrB,mDAAyB6D,GACzB,8CAAoBG,EAAQ,QAAU,WACtC,6BACGD,EAAQd,QAAU,EAAI,KACrB,wFAEDS,EAAQ,EAAI,KAAO,6DACnBG,EAAU,EAAI,KAAO,+DACrB7D,EAAM,EAAI,KAAO,+DCmEXoE,EA3FG,SAAC,GAAwB,IAAtBJ,EAAqB,EAArBA,MAAOD,EAAc,EAAdA,QAAc,EACIpE,mBAASqE,GADb,gCAENrE,mBAAS,KAFH,mBAEtB0E,GAFsB,aAGhB1E,mBAAS,IAHO,mBAGjCG,EAHiC,KAG3BC,EAH2B,OAIZJ,mBAAS,IAJG,mBAIjCO,EAJiC,KAIzBC,EAJyB,OAKJR,mBAAS,IALL,mBAKjC2E,EALiC,KAKrBC,EALqB,OAMlB5E,mBAAS,IANS,mBAMjCK,EANiC,KAM5BC,EAN4B,KAQlCuE,EAAc,SAACC,EAAMC,GACzB,IAAMC,EAAQD,EAAejC,QAAO,SAACnD,GAAD,OAA6B,IAAjBA,EAAOmF,MACjDhE,EAASkE,EAAMlC,QAAO,SAACjC,GAAD,OAAoB,IAAbA,EAAEC,UAQrC,OANIA,EAAOwC,OAAS,EACL2B,EAAgBnE,GAEhBmE,EAAgBD,IAM3BC,EAAkB,SAACF,GACvB,OAAOA,EAAeG,KAAKC,MAAMD,KAAKE,SAAWL,EAAezB,UAG5D+B,EAAsB,SAACC,EAAcC,GAIzC,OAHqBA,EAAiBzC,QACpC,SAACnD,GAAD,OAAYA,EAAOsB,KAAOqE,EAAarE,OAmBrCuE,EAAa,SAACD,GAIlB,IAHA,IAAI9C,EAAU8C,EAERE,EAAS,GACNC,EAAW,EAAGA,EAAW,EAAGA,IAAY,CAC/C,IAAMC,EAAYd,EAAY,MAAOpC,GACrCgD,EAAOG,KAAKD,GACZlD,EAAU4C,EAAoBM,EAAWlD,GAE3C,MAAO,CAAEA,UAASgD,WAGdI,EAAY,kBAChBxF,EAAI2C,KAAI,SAACrD,GAAD,OACN,yBAAKyD,IAAKzD,EAAOM,KAAO,GAAKN,EAAOsB,IAAKtB,EAAOM,KAAhD,UAGE6F,EAAa,kBACjBnB,EAAW3B,KAAI,SAACrD,GAAD,OACb,yBAAKyD,IAAKzD,EAAOM,KAAO,GAAKN,EAAOsB,IAAKtB,EAAOM,KAAhD,UAQJ,OALAoC,qBAAU,WACRqC,EAAaN,GACb2B,QAAQC,IAAI3F,KACX,CAACgE,EAAOD,EAAS/D,IAGlB,oCACE,4BAAQ4F,UAAW5B,EAAO7C,QA3CT,WACnB,IAAI+D,EAAmBnB,EACjB8B,EAAIrB,EAAY,OAAQU,GAC9BA,EAAmBF,EAAoBa,EAAGX,GAC1C,IAAMY,EAAItB,EAAY,SAAUU,GAChCA,EAAmBF,EAAoBc,EAAGZ,GAC1C,IAAMa,EAAIZ,EAAWD,GAErBnF,EAAQ8F,GACR1F,EAAU2F,GACV7F,EAAO8F,EAAEX,QACTb,EAAcwB,EAAE3D,WAgCd,SAGA,6BACE,6CACA,oCAAUtC,EAAOA,EAAKF,KAAO,KAA7B,KACA,sCAAYM,EAASA,EAAON,KAAO,MACnC,mCAASI,EAAIiD,OAAS,EAAI,KAAO,kBAACuC,EAAD,OACjC,mDACuBlB,EAAWrB,OAAS,EAAI,KAAO,kBAACwC,EAAD,UCtD/CO,MAxBf,WACE,IAAMC,EAAgBC,qBAAW5C,GADpB,EAEiB3D,mBAASsG,GAF1B,mBAEN7D,EAFM,KAEGC,EAFH,OAGa1C,oBAAS,GAHtB,mBAGNqE,EAHM,KAGCmC,EAHD,OAIiBxG,mBAAS,IAJ1B,mBAINoE,EAJM,KAIGqC,EAJH,OAKazG,mBAAS,cALtB,mBAYb,OAZa,UAObqC,qBAAU,WACR,IAAM2C,EAAsBvC,EHWHK,QAAO,SAACnD,GAAD,OAA0B,IAAdA,EAAOoB,MGVnD0F,EAAWzB,GACXwB,EHlBsB,SAAC1C,GACzB,IAAM4C,EAAY7C,EAAWC,GACvBC,EAAQ2C,EAAU3C,MAAQ,EAC1B1D,EAAMqG,EAAUrG,KAAO,EACvB6D,EAAUwC,EAAUxC,QAAU,EAE9ByC,EAAa5C,GAAS1D,GAAO6D,EAInC,OAD+B,IAFZJ,EAAaR,QAAU,IAEY,IAAfqD,EGS5BC,CAAW5B,MACnB,CAACvC,IAEF,yBAAKoE,UAAU,OACb,kBAAC,EAAcC,SAAf,CAAwB1F,MAAOsC,GAC7B,0CACA,kBAAC,EAAD,CAAejB,QAASA,EAASC,WAAYA,IAC7C,kBAACqE,EAAD,CAAY3C,QAASA,EAAS3B,QAASA,EAAS4B,MAAOA,IACvD,kBAAC,EAAD,CAAWA,MAAOA,EAAOD,QAASA,OCdtB4C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLlC,QAAQkC,MAAMA,EAAMC,c","file":"static/js/main.1fd8aa28.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/tank.5a9eb1ec.png\";","module.exports = __webpack_public_path__ + \"static/media/tank-unselected.9ca93f35.png\";","module.exports = __webpack_public_path__ + \"static/media/dps.9346b097.png\";","module.exports = __webpack_public_path__ + \"static/media/dps-unselected.3c0918af.png\";","module.exports = __webpack_public_path__ + \"static/media/healer.8126c603.png\";","module.exports = __webpack_public_path__ + \"static/media/healer-unselected.5bd3ef17.png\";","import React, { useState } from \"react\";\nimport Modal from \"react-awesome-modal\";\n//todo: form validation.\nconst PlayerFormModal = ({\n  visible,\n  close,\n  player,\n  updatePlayer,\n  addPlayer,\n  arrayLength,\n  removePlayer,\n}) => {\n  const [name, setName] = useState(player ? player.name : \"\");\n\n  const [tank, setTank] = useState(player ? player.tank : false);\n\n  const [dps, setDps] = useState(player ? player.dps : false);\n\n  const [healer, setHealer] = useState(player ? player.healer : false);\n\n  const clearForm = () => {\n    setName(\"\");\n    setTank(false);\n    setDps(false);\n    setHealer(false);\n  };\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    const p = {\n      name,\n      tank,\n      dps,\n      healer,\n      locked: false,\n      in: true,\n    };\n    if (player) {\n      const updatedPlayer = { ...p, id: player.id };\n      updatePlayer(updatedPlayer);\n    } else {\n      const id = arrayLength + 1;\n      const newPlayer = { ...p, id };\n      addPlayer(newPlayer);\n    }\n    clearForm();\n  };\n\n  return (\n    <Modal visible={visible} effect=\"fadeInUp\">\n      <form onSubmit={handleSubmit}>\n        <label>Name:</label>\n        <input\n          type=\"text\"\n          value={name}\n          onChange={(e) => setName(e.target.value)}\n        />\n        <label>Tank:</label>\n        <input\n          type=\"checkbox\"\n          checked={tank}\n          name=\"Tank\"\n          onChange={() => {\n            setTank(!tank);\n          }}\n        />\n        <label>DPS:</label>\n        <input\n          type=\"checkbox\"\n          checked={dps}\n          name=\"Dps\"\n          onChange={() => {\n            setDps(!dps);\n          }}\n        />\n        <label>Healer:</label>\n        <input\n          type=\"checkbox\"\n          checked={healer}\n          name=\"healer\"\n          onChange={() => {\n            setHealer(!healer);\n          }}\n        />\n        {player ? (\n          <button\n            onClick={() => {\n              removePlayer(player.id);\n            }}\n          >\n            remove\n          </button>\n        ) : null}\n        <button onClick={close}>Close</button>\n        <input type=\"submit\" />\n      </form>\n    </Modal>\n  );\n};\n\nexport default PlayerFormModal;\n","import tank from \"../../assets/images/tank.png\";\nimport tankUnselected from \"../../assets/images/tank-unselected.png\";\nimport dps from \"../../assets/images/dps.png\";\nimport dpsUnselected from \"../../assets/images/dps-unselected.png\";\nimport healer from \"../../assets/images/healer.png\";\nimport healerUnselected from \"../../assets/images/healer-unselected.png\";\n\nexport const images = {\n  tank,\n  tankUnselected,\n  dps,\n  dpsUnselected,\n  healer,\n  healerUnselected,\n};\n","export const roleLogo = {\n  height: \"50px\",\n  width: \"50px\",\n};\n","import React, { useState, useEffect } from \"react\";\nimport PlayerFormModal from \"./playerFormModal\";\nimport { images } from \"./providers/images\";\nimport { roleLogo } from \"./providers/imageStyles\";\n\nconst PlayerCard = ({ player, removePlayer, updatePlayer, style }) => {\n  const [modalOpen, setModalOpen] = useState(false);\n\n  const [tank, setTank] = useState(player.tank);\n\n  const [dps, setDps] = useState(player.dps);\n  const [healer, setHealer] = useState(player.healer);\n\n  const handleLocked = () => {\n    const p = { ...player, locked: !player.locked };\n    updatePlayer(p);\n  };\n\n  const handleIn = () => {\n    const p = { ...player, in: !player.in };\n    updatePlayer(p);\n  };\n\n  const updateRoles = (roleToUpdate, newBoolean) => {\n    const updatedPlayer = { ...player };\n    updatedPlayer[roleToUpdate] = newBoolean;\n    updatePlayer(updatedPlayer);\n  };\n\n  useEffect(() => {}, [player]);\n  return (\n    <div style={style}>\n      <div> Name: {player.name}</div>\n      <label>Locked?</label>\n      <input type=\"checkbox\" checked={player.locked} onChange={handleLocked} />\n      <label>In the Roll?</label>\n      <input type=\"checkbox\" checked={player.in} onChange={handleIn} />\n      <div>\n        <img\n          style={roleLogo}\n          src={player.tank ? images.tank : images.tankUnselected}\n          alt=\"tank logo\"\n          onClick={() => {\n            setTank(!tank);\n            updateRoles(\"tank\", !tank);\n          }}\n        />\n        <img\n          style={roleLogo}\n          src={healer ? images.healer : images.healerUnselected}\n          alt=\"healer logo\"\n          onClick={() => {\n            setHealer(!healer);\n            updateRoles(\"healer\", !healer);\n          }}\n        />\n        <img\n          style={roleLogo}\n          src={dps ? images.dps : images.dpsUnselected}\n          alt=\"dps logo\"\n          onClick={() => {\n            setDps(!dps);\n            updateRoles(\"dps\", !dps);\n          }}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default PlayerCard;\n\nconst styles = {\n  card: { width: \"100%\" },\n};\n","import React, { useState } from \"react\";\nimport PlayerCard from \"./playerCard\";\nimport PlayerFormModal from \"./playerFormModal\";\n\nconst RenderPlayers = ({ players, setPlayers }) => {\n  const [modalOpen, setModalOpen] = useState(false);\n\n  const removePlayer = (id) => {\n    const newPlayers = players.filter((player) => player.id !== id);\n    setPlayers(newPlayers);\n  };\n\n  const updatePlayer = (updatedPlayer) => {\n    const updatedPlayers = players.map((p) => {\n      if (p.id === updatedPlayer.id) {\n        const player = updatedPlayer;\n        return player;\n      } else {\n        return p;\n      }\n    });\n    setPlayers(updatedPlayers);\n    setModalOpen(false);\n  };\n\n  const addPlayer = (newPlayer) => {\n    const newPlayers = [...players, newPlayer];\n    setPlayers(newPlayers);\n    setModalOpen(false);\n  };\n\n  const Players = () =>\n    players.map((player) => (\n      <PlayerCard\n        style={styles.card}\n        key={player.id}\n        player={player}\n        removePlayer={removePlayer}\n        updatePlayer={updatePlayer}\n      />\n    ));\n  return (\n    <div style={styles.cardContainer}>\n      <Players />\n      <br />\n      <br />\n      <PlayerFormModal\n        player={null}\n        visible={modalOpen}\n        close={() => setModalOpen(false)}\n        addPlayer={addPlayer}\n        arrayLength={players.length}\n      />\n      <button onClick={() => setModalOpen(!modalOpen)}>Add Player</button>\n    </div>\n  );\n};\nexport default RenderPlayers;\n\nconst styles = {\n  card: {\n    width: \"30%\",\n    height: \"100%\",\n  },\n  cardContainer: {\n    display: \"flex\",\n    flexDirection: \"row\",\n    flexWrap: \"wrap\",\n  },\n};\n","// import React from \"react\";\n\nexport const playersPlaceHolder = [\n  {\n    name: \"Emily\",\n    tank: false,\n    dps: true,\n    healer: true,\n    locked: false,\n    in: true,\n    id: 1,\n  },\n  {\n    name: \"Tyler\",\n    tank: true,\n    dps: true,\n    healer: true,\n    locked: false,\n    in: true,\n    id: 2,\n  },\n  {\n    name: \"Kevin\",\n    tank: true,\n    dps: true,\n    healer: false,\n    locked: false,\n    in: true,\n    id: 3,\n  },\n  {\n    name: \"Jill\",\n    tank: false,\n    dps: true,\n    healer: true,\n    locked: false,\n    in: true,\n    id: 4,\n  },\n  {\n    name: \"Scott\",\n    tank: false,\n    dps: true,\n    healer: true,\n    locked: false,\n    in: true,\n    id: 5,\n  },\n  {\n    name: \"Jordan\",\n    tank: false,\n    dps: true,\n    healer: false,\n    locked: false,\n    in: true,\n    id: 6,\n  },\n  {\n    name: \"Jason\",\n    tank: true,\n    dps: true,\n    healer: true,\n    locked: false,\n    in: true,\n    id: 7,\n  },\n];\n","import { createContext } from \"react\";\nimport { playersPlaceHolder } from \"./databasePlaceholder\";\n\nconst PlayerContext = createContext(playersPlaceHolder);\n\nexport default PlayerContext;\n","export const validCheck = (playersArray) => {\n  const roleCount = countRoles(playersArray);\n  const tanks = roleCount.tanks > 0;\n  const dps = roleCount.dps >= 3;\n  const healers = roleCount.healers > 0;\n\n  const rolesValid = tanks && dps && healers;\n  const groupValid = playersArray.length >= 5;\n\n  const isValid = groupValid === true && rolesValid === true;\n  return isValid;\n};\n\nexport const countRoles = (playersArray) => {\n  const tanks = playersArray.reduce((n, player) => {\n    return n + (player.tank === true && player.in === true);\n  }, 0);\n  const healers = playersArray.reduce((n, player) => {\n    return n + (player.healer === true && player.in === true);\n  }, 0);\n  const dps = playersArray.reduce((n, player) => {\n    return n + (player.dps === true && player.in === true);\n  }, 0);\n  return { tanks, healers, dps };\n};\n\nexport const createInGroup = (playersArray) => {\n  const group = playersArray.filter((player) => player.in === true);\n  return group;\n};\n","import React, { useState, useEffect } from \"react\";\nimport { countRoles } from \"./providers/BaseAppLogic\";\n\nconst GetAGroup = ({ players, inGroup, valid }) => {\n  const [tanks, setTanks] = useState(0);\n  const [dps, setDps] = useState(0);\n  const [healers, setHealers] = useState(0);\n\n  useEffect(() => {\n    const roleCounts = countRoles(players);\n    setTanks(roleCounts.tanks);\n    setDps(roleCounts.dps);\n    setHealers(roleCounts.healers);\n  }, [players]);\n  return (\n    <>\n      <div>Number of Tanks: {tanks}</div>\n      <div>Number of DPS: {dps}</div>\n      <div>Number of Healers: {healers}</div>\n      <div>This group is {valid ? \"valid\" : \"invalid\"}</div>\n      <div>\n        {inGroup.length >= 6 ? null : (\n          <li>You must have at least 6 players or rolling is pointless</li>\n        )}\n        {tanks > 0 ? null : <li>You must have at least 1 tank</li>}\n        {healers > 0 ? null : <li>You must have at least 1 healer</li>}\n        {dps > 2 ? null : <li>You must have at least 3 DPS</li>}\n      </div>\n    </>\n  );\n};\n\nexport default GetAGroup;\n","import React, { useState, useEffect } from \"react\";\n\nconst GroupRoll = ({ valid, inGroup }) => {\n  const [currentlyValid, setCurrentlyValid] = useState(valid);\n  const [rollGroup, setRollGroup] = useState([]);\n  const [tank, setTank] = useState({});\n  const [healer, setHealer] = useState({});\n  const [outOfGroup, setOutOfGroup] = useState([]);\n  const [dps, setDps] = useState([]);\n\n  const rollForRole = (role, arrayOfPlayers) => {\n    const group = arrayOfPlayers.filter((player) => player[role] === true);\n    const locked = group.filter((p) => p.locked === true);\n    let pickedRole = {};\n    if (locked.length > 0) {\n      pickedRole = randomFromArray(locked);\n    } else {\n      pickedRole = randomFromArray(group);\n    }\n\n    return pickedRole;\n  };\n\n  const randomFromArray = (arrayOfPlayers) => {\n    return arrayOfPlayers[Math.floor(Math.random() * arrayOfPlayers.length)];\n  };\n\n  const removePickFromGroup = (pickedPlayer, remainingPlayers) => {\n    const newRollGroup = remainingPlayers.filter(\n      (player) => player.id !== pickedPlayer.id\n    );\n    return newRollGroup;\n  };\n\n  const rollForGroup = () => {\n    let remainingPlayers = inGroup;\n    const t = rollForRole(\"tank\", remainingPlayers);\n    remainingPlayers = removePickFromGroup(t, remainingPlayers);\n    const h = rollForRole(\"healer\", remainingPlayers);\n    remainingPlayers = removePickFromGroup(h, remainingPlayers);\n    const d = rollForDps(remainingPlayers);\n\n    setTank(t);\n    setHealer(h);\n    setDps(d.newDPS);\n    setOutOfGroup(d.players);\n  };\n\n  const rollForDps = (remainingPlayers) => {\n    let players = remainingPlayers;\n\n    const newDPS = [];\n    for (let dpsCount = 1; dpsCount < 4; dpsCount++) {\n      const pickedDPS = rollForRole(\"dps\", players);\n      newDPS.push(pickedDPS);\n      players = removePickFromGroup(pickedDPS, players);\n    }\n    return { players, newDPS };\n  };\n\n  const RenderDPS = () =>\n    dps.map((player) => (\n      <div key={player.name + 10 + player.id}>{player.name}, </div>\n    ));\n\n  const OutOfGroup = () =>\n    outOfGroup.map((player) => (\n      <div key={player.name + 10 + player.id}>{player.name}, </div>\n    ));\n\n  useEffect(() => {\n    setRollGroup(inGroup);\n    console.log(dps);\n  }, [valid, inGroup, dps]);\n\n  return (\n    <>\n      <button disabled={!valid} onClick={rollForGroup}>\n        Roll!\n      </button>\n      <div>\n        <h1>current Group</h1>\n        <h3>Tank:{tank ? tank.name : null} </h3>\n        <h3>Healer:{healer ? healer.name : null}</h3>\n        <h3>DPS:{dps.length < 1 ? null : <RenderDPS />}</h3>\n        <h3>\n          Not in Current Roll:{outOfGroup.length < 1 ? null : <OutOfGroup />}\n        </h3>\n      </div>\n    </>\n  );\n};\n\nexport default GroupRoll;\n","import React, { useState, useContext, useEffect } from \"react\";\nimport RenderPlayers from \"./components/renderPlayers\";\nimport PlayerContext from \"./components/providers/PlayerContext\";\nimport { playersPlaceHolder } from \"./components/providers/databasePlaceholder\";\nimport ValidGroup from \"./components/ValidGroup\";\nimport GroupRoll from \"./components/groupRoll\";\nimport { validCheck, createInGroup } from \"./components/providers/BaseAppLogic\";\n\nfunction App() {\n  const playerContext = useContext(PlayerContext);\n  const [players, setPlayers] = useState(playerContext);\n  const [valid, setValid] = useState(false);\n  const [inGroup, setInGroup] = useState([]);\n  const [theme, setTheme] = useState(\"lightTheme\");\n\n  useEffect(() => {\n    const group = createInGroup(players);\n    setInGroup(group);\n    setValid(validCheck(group));\n  }, [players]);\n  return (\n    <div className=\"App\">\n      <PlayerContext.Provider value={playersPlaceHolder}>\n        <h1>Roll Me in</h1>\n        <RenderPlayers players={players} setPlayers={setPlayers} />\n        <ValidGroup inGroup={inGroup} players={players} valid={valid} />\n        <GroupRoll valid={valid} inGroup={inGroup} />\n      </PlayerContext.Provider>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}