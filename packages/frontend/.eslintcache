[{"/home/scott/coding/rollmein/packages/frontend/src/index.tsx":"1","/home/scott/coding/rollmein/packages/frontend/src/serviceWorker.js":"2","/home/scott/coding/rollmein/packages/frontend/src/App.tsx":"3","/home/scott/coding/rollmein/packages/frontend/src/components/Content.tsx":"4","/home/scott/coding/rollmein/packages/frontend/src/components/Footer.tsx":"5","/home/scott/coding/rollmein/packages/frontend/src/components/Navbar.tsx":"6","/home/scott/coding/rollmein/packages/frontend/src/components/providers/AuthProvider.tsx":"7","/home/scott/coding/rollmein/packages/frontend/src/components/providers/PlayerProvider.tsx":"8","/home/scott/coding/rollmein/packages/frontend/src/components/providers/ThemeProvider.tsx":"9","/home/scott/coding/rollmein/packages/frontend/src/components/utils/AuthCRUD.ts":"10","/home/scott/coding/rollmein/packages/frontend/src/components/utils/PlayerCRUD.ts":"11","/home/scott/coding/rollmein/packages/frontend/src/components/utils/BaseAppLogic.ts":"12","/home/scott/coding/rollmein/packages/frontend/src/components/utils/Themes.ts":"13","/home/scott/coding/rollmein/packages/frontend/src/components/ProtectedRoute.tsx":"14","/home/scott/coding/rollmein/packages/frontend/src/components/Login.tsx":"15","/home/scott/coding/rollmein/packages/frontend/src/components/Logout.tsx":"16","/home/scott/coding/rollmein/packages/frontend/src/components/NotFound.tsx":"17","/home/scott/coding/rollmein/packages/frontend/src/components/ValidGroup.tsx":"18","/home/scott/coding/rollmein/packages/frontend/src/components/index.tsx":"19","/home/scott/coding/rollmein/packages/frontend/src/components/NavItem.tsx":"20","/home/scott/coding/rollmein/packages/frontend/src/components/utils/Navbar.ts":"21","/home/scott/coding/rollmein/packages/frontend/src/components/ValidRole.tsx":"22","/home/scott/coding/rollmein/packages/frontend/src/components/Players.tsx":"23","/home/scott/coding/rollmein/packages/frontend/src/components/Roll.tsx":"24","/home/scott/coding/rollmein/packages/frontend/src/components/PlayerCard.tsx":"25","/home/scott/coding/rollmein/packages/frontend/src/components/RollByRole.tsx":"26","/home/scott/coding/rollmein/packages/frontend/src/components/FreeForAllRoll.tsx":"27","/home/scott/coding/rollmein/packages/frontend/src/components/RoleLogoImage.tsx":"28","/home/scott/coding/rollmein/packages/frontend/src/components/RenderGroup.tsx":"29"},{"size":566,"mtime":1607981266480,"results":"30","hashOfConfig":"31"},{"size":5086,"mtime":1607981266480,"results":"32","hashOfConfig":"31"},{"size":817,"mtime":1607981266480,"results":"33","hashOfConfig":"31"},{"size":647,"mtime":1607981266480,"results":"34","hashOfConfig":"31"},{"size":117,"mtime":1607981266480,"results":"35","hashOfConfig":"31"},{"size":1165,"mtime":1607981266480,"results":"36","hashOfConfig":"31"},{"size":2733,"mtime":1611449290180,"results":"37","hashOfConfig":"31"},{"size":3114,"mtime":1611449290180,"results":"38","hashOfConfig":"31"},{"size":848,"mtime":1607981266480,"results":"39","hashOfConfig":"31"},{"size":785,"mtime":1611449290180,"results":"40","hashOfConfig":"31"},{"size":1051,"mtime":1611449290180,"results":"41","hashOfConfig":"31"},{"size":757,"mtime":1611449290180,"results":"42","hashOfConfig":"31"},{"size":1789,"mtime":1607981266480,"results":"43","hashOfConfig":"31"},{"size":511,"mtime":1607981266480,"results":"44","hashOfConfig":"31"},{"size":3086,"mtime":1611449290190,"results":"45","hashOfConfig":"31"},{"size":501,"mtime":1607981266480,"results":"46","hashOfConfig":"31"},{"size":230,"mtime":1607981266480,"results":"47","hashOfConfig":"31"},{"size":1451,"mtime":1607981266480,"results":"48","hashOfConfig":"31"},{"size":229,"mtime":1607981266480,"results":"49","hashOfConfig":"31"},{"size":474,"mtime":1607981266480,"results":"50","hashOfConfig":"31"},{"size":175,"mtime":1607981266480,"results":"51","hashOfConfig":"31"},{"size":1015,"mtime":1607981266480,"results":"52","hashOfConfig":"31"},{"size":603,"mtime":1611449290190,"results":"53","hashOfConfig":"31"},{"size":251,"mtime":1607981266480,"results":"54","hashOfConfig":"31"},{"size":5554,"mtime":1613791626690,"results":"55","hashOfConfig":"31"},{"size":1728,"mtime":1611449290180,"results":"56","hashOfConfig":"31"},{"size":771,"mtime":1611449290190,"results":"57","hashOfConfig":"31"},{"size":443,"mtime":1611449290180,"results":"58","hashOfConfig":"31"},{"size":531,"mtime":1611449290190,"results":"59","hashOfConfig":"31"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},"1cna4ti",{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"62"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"62"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"114","usedDeprecatedRules":"62"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"117","usedDeprecatedRules":"62"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},"/home/scott/coding/rollmein/packages/frontend/src/index.tsx",[],["125","126"],"/home/scott/coding/rollmein/packages/frontend/src/serviceWorker.js",[],["127","128"],"/home/scott/coding/rollmein/packages/frontend/src/App.tsx",[],"/home/scott/coding/rollmein/packages/frontend/src/components/Content.tsx",[],"/home/scott/coding/rollmein/packages/frontend/src/components/Footer.tsx",[],"/home/scott/coding/rollmein/packages/frontend/src/components/Navbar.tsx",[],"/home/scott/coding/rollmein/packages/frontend/src/components/providers/AuthProvider.tsx",[],"/home/scott/coding/rollmein/packages/frontend/src/components/providers/PlayerProvider.tsx",["129","130"],"// eslint-disable-next-line\nimport React, { createContext, useState, useEffect, useContext } from \"react\";\n\nimport {\n  PlayerObject,\n  PlayerFormObject,\n  roleCountInterface,\n} from \"../../types/Interfaces\";\n\nimport { PlayerContextType } from \"../../types/Types\";\nimport {\n  PlayerUpdate,\n  NewPlayer,\n  DeletePlayer,\n  GetPlayers,\n} from \"../utils/PlayerCRUD\";\n\nimport { useAuth } from \"./AuthProvider\";\nimport Axios from \"axios\";\nimport { validCheck } from \"../utils/BaseAppLogic\";\n\nconst PlayerContext = createContext<PlayerContextType | undefined>(undefined);\n\nfunction PlayerProvider({ children }: any) {\n  const { authenticated, uuid } = useAuth()!;\n  const [players, setPlayers] = useState<Array<PlayerObject> | undefined>(\n    undefined\n  );\n  const [roleCounts, setRoleCounts] = useState<roleCountInterface>({\n    tanks: 0,\n    healers: 0,\n    dps: 0,\n    inGroupCount: 0,\n  });\n  const [inGroup, setInGroup] = useState<Array<PlayerObject> | undefined>(\n    undefined\n  );\n  const [outGroup, setOutGroup] = useState<Array<PlayerObject> | undefined>();\n  const [currentRoll, setCurrentRoll] = useState<\n    Array<PlayerObject> | undefined\n  >();\n  const [showPlayers, setShowPlayers] = useState(true);\n  const [valid, setValid] = useState<boolean>(false);\n\n  const removePlayer = async (id: number) => {\n    const newPlayers: Array<PlayerObject> = players!.filter(\n      (player: PlayerObject) => player.id !== id\n    );\n    const res = await DeletePlayer(id);\n    setPlayers(newPlayers);\n  };\n\n  const updatePlayer = async (player: PlayerObject): Promise<PlayerObject> => {\n    const res = await PlayerUpdate(player);\n    return res;\n  };\n  const addPlayer = async (\n    newPlayer: PlayerFormObject\n  ): Promise<PlayerObject> => {\n    const res = await NewPlayer(newPlayer);\n    const newPlayers = players?.concat(res);\n    console.log(newPlayers);\n    setPlayers(newPlayers);\n    return res;\n  };\n\n  function toggleShowPlayers() {\n    setShowPlayers(!showPlayers);\n  }\n  const blankPlayer: PlayerFormObject = {\n    playerName: \"\",\n    tank: false,\n    healer: false,\n    dps: false,\n    locked: false,\n    inTheRoll: false,\n    userId: \"\",\n  };\n  const pullCountFromDB = async () => {\n    const res = await Axios.get(\"/api/v1/rolls/count\");\n    setRoleCounts(res.data);\n    validCheck(res.data);\n  };\n\n  const pullPlayersFromDb = async () => {\n    const res = await GetPlayers(uuid!);\n    setPlayers(res);\n  };\n\n  useEffect(() => {\n    if (authenticated) {\n      pullPlayersFromDb();\n      pullCountFromDB();\n    }\n  }, [authenticated]);\n\n  return (\n    <PlayerContext.Provider\n      value={{\n        players,\n        setPlayers,\n        blankPlayer,\n        inGroup,\n        setInGroup,\n        removePlayer,\n        updatePlayer,\n        addPlayer,\n        showPlayers,\n        roleCounts,\n        toggleShowPlayers,\n        valid,\n        setValid,\n        outGroup,\n        setOutGroup,\n        currentRoll,\n        setCurrentRoll,\n      }}\n    >\n      {children}\n    </PlayerContext.Provider>\n  );\n}\n\nconst usePlayerData = () => useContext(PlayerContext);\n\nexport { PlayerProvider, usePlayerData };\n","/home/scott/coding/rollmein/packages/frontend/src/components/providers/ThemeProvider.tsx",[],"/home/scott/coding/rollmein/packages/frontend/src/components/utils/AuthCRUD.ts",[],"/home/scott/coding/rollmein/packages/frontend/src/components/utils/PlayerCRUD.ts",[],"/home/scott/coding/rollmein/packages/frontend/src/components/utils/BaseAppLogic.ts",["131"],"import { PlayerObject } from \"../../types/Interfaces\";\n\ntype rollCountObject = {\n  Tanks: number,\n  Dps: number,\n  Healers: number,\n  inCount: number\n}\n\nconst validCheck = ({ Tanks, Dps, Healers, inCount }: rollCountObject) => {\n  const tanks = Tanks > 0;\n  const dps = Dps >= 3;\n  const healers = Healers > 0;\n  const rolesValid = tanks === true && dps === true && healers === true\n  const groupValid = inCount >= 6 ? true : false\n\n  const isValid = groupValid === true && rolesValid === true;\n  return isValid;\n};\n\n\nconst placeHolderArray: Array<PlayerObject> = [\n  {\n    playerName: \"\",\n    tank: false,\n    dps: false,\n    healer: false,\n    locked: false,\n    inTheRoll: false,\n    id: 999999,\n    userId: \"placeHolder\",\n  },\n];\n\nexport { validCheck }\n","/home/scott/coding/rollmein/packages/frontend/src/components/utils/Themes.ts",[],"/home/scott/coding/rollmein/packages/frontend/src/components/ProtectedRoute.tsx",[],"/home/scott/coding/rollmein/packages/frontend/src/components/Login.tsx",[],"/home/scott/coding/rollmein/packages/frontend/src/components/Logout.tsx",[],"/home/scott/coding/rollmein/packages/frontend/src/components/NotFound.tsx",[],"/home/scott/coding/rollmein/packages/frontend/src/components/ValidGroup.tsx",[],"/home/scott/coding/rollmein/packages/frontend/src/components/index.tsx",[],"/home/scott/coding/rollmein/packages/frontend/src/components/NavItem.tsx",[],"/home/scott/coding/rollmein/packages/frontend/src/components/utils/Navbar.ts",[],"/home/scott/coding/rollmein/packages/frontend/src/components/ValidRole.tsx",[],"/home/scott/coding/rollmein/packages/frontend/src/components/Players.tsx",[],"/home/scott/coding/rollmein/packages/frontend/src/components/Roll.tsx",[],"/home/scott/coding/rollmein/packages/frontend/src/components/PlayerCard.tsx",["132"],"// eslint-disable-next-line\nimport React, { useState, useEffect } from \"react\";\n\nimport { ReactComponent as ClosedLock } from \"./assets/svgs/Lock.svg\";\nimport { ReactComponent as OpenLock } from \"./assets/svgs/OpenLock.svg\";\nimport { ReactComponent as Dice } from \"./assets/svgs/Dice.svg\";\nimport { ReactComponent as Trash } from \"./assets/svgs/Trash.svg\";\nimport Tank from \"./assets/images/TANK.png\";\nimport Dps from \"./assets/images/DPS.png\";\nimport Healer from \"./assets/images/HEALER.png\";\nimport { PlayerObject, PlayerFormObject } from \"../types/Interfaces\";\nimport { usePlayerData } from \"./providers/PlayerProvider\";\nimport RoleLogoImage from \"./RoleLogoImage\";\nimport { useAuth } from \"./providers/AuthProvider\";\nimport { GetOnePlayer } from \"./utils/PlayerCRUD\";\n\ntype PlayerCardType = {\n  cardId?: number;\n};\n\nconst PlayerCard = ({ cardId }: PlayerCardType) => {\n  const {\n    updatePlayer,\n    removePlayer,\n    addPlayer,\n    blankPlayer,\n  } = usePlayerData()!;\n  const { uuid } = useAuth()!;\n  const [playerName, setPlayerName] = useState(\"\");\n  const [tank, setTank] = useState(false);\n  const [dps, setDps] = useState(false);\n  const [healer, setHealer] = useState(false);\n  const [locked, setLocked] = useState(false);\n  const [inTheRoll, setInTheRoll] = useState(false);\n  const [editOrCreate, setEditOrCreate] = useState(false);\n\n  const handleSubmit = async (e: any) => {\n    console.log(\"handle submit hit\");\n    e.preventDefault();\n    const conformedPlayer: PlayerFormObject = {\n      playerName,\n      tank,\n      dps,\n      healer,\n      locked,\n      inTheRoll,\n      userId: uuid!,\n    };\n    const res = await addPlayer(conformedPlayer);\n    updateAllValues(res);\n    toggleForm();\n    clearForm();\n  };\n\n  function clearForm() {\n    updateAllValues(blankPlayer);\n  }\n\n  function toggleForm() {\n    setEditOrCreate(!editOrCreate);\n  }\n\n  const updateAllValues = (playerObject: PlayerFormObject) => {\n    setPlayerName(playerObject.playerName);\n    setTank(playerObject.tank);\n    setDps(playerObject.dps);\n    setHealer(playerObject.healer);\n    setLocked(playerObject.locked);\n    setInTheRoll(playerObject.inTheRoll);\n  };\n\n  const handleBooleanUpdate = async (\n    type: string,\n    booleanToChange: boolean,\n    callBack: Function\n  ) => {\n    callBack(!booleanToChange);\n    const idCheck = cardId!;\n    const conformedPlayer: PlayerObject = {\n      id: idCheck,\n      playerName,\n      tank,\n      dps,\n      healer,\n      locked,\n      inTheRoll,\n      userId: uuid!,\n    };\n    const updatedPlayer = { ...conformedPlayer, [type]: !booleanToChange };\n    const res = await updatePlayer(updatedPlayer);\n    updateAllValues(res);\n  };\n  const getPlayerFromDatabase = async () => {\n    const res = await GetOnePlayer(cardId!);\n    updateAllValues(res);\n  };\n\n  useEffect(() => {\n    if (cardId) {\n      getPlayerFromDatabase();\n    } else {\n      setEditOrCreate(false);\n      updateAllValues(blankPlayer);\n    }\n  }, [cardId]);\n\n  function AddPlayerArea() {\n    return (\n      <div\n        className=\"add-player\"\n        onClick={toggleForm}\n        style={{ height: \"150px\" }}\n      >\n        <div className=\"add-player-button\">Add Player</div>\n      </div>\n    );\n  }\n\n  const TrashButton = () => {\n    if (cardId) {\n      return (\n        <Trash\n          className=\"image delete-icon\"\n          onClick={() => removePlayer(cardId)}\n        />\n      );\n    } else {\n      return null;\n    }\n  };\n  const CurrentCardHead = () => (\n    <div className=\"card-head\">\n      <div className=\"name\">{playerName}</div>\n      <TrashButton />\n    </div>\n  );\n  if (cardId === undefined && !editOrCreate) {\n    return <AddPlayerArea />;\n  } else {\n    return (\n      <div className={locked ? \"card-locked\" : \"card\"}>\n        <div\n          className=\"card-locked-area\"\n          onClick={() => {\n            handleBooleanUpdate(\"locked\", locked, setLocked);\n          }}\n        >\n          {locked ? (\n            <ClosedLock className=\"image locked\" />\n          ) : (\n            <OpenLock className=\"image unlocked\" />\n          )}\n        </div>\n\n        <div className=\"card-head\">\n          {editOrCreate ? (\n            <form>\n              <label>\n                Player Name\n                <input\n                  type=\"text\"\n                  value={playerName}\n                  onChange={(e) => setPlayerName(e.target.value)}\n                />\n                <button onClick={handleSubmit}>Save</button>\n                <button onClick={() => toggleForm()}>Cancel</button>\n              </label>\n            </form>\n          ) : (\n            <CurrentCardHead />\n          )}\n        </div>\n        <div className=\"card-body\">\n          <RoleLogoImage\n            active={tank}\n            source={Tank}\n            type=\"tank\"\n            onClick={() => handleBooleanUpdate(\"tank\", tank, setTank)}\n          />\n          <RoleLogoImage\n            active={healer}\n            source={Healer}\n            type=\"healer\"\n            onClick={() => handleBooleanUpdate(\"healer\", healer, setHealer)}\n          />\n          <RoleLogoImage\n            active={dps}\n            source={Dps}\n            type=\"dps\"\n            onClick={() => handleBooleanUpdate(\"dps\", dps, setDps)}\n          />\n\n          <Dice\n            className={`image ${\n              inTheRoll ? \"in-the-roll-active\" : \"in-the-roll\"\n            }`}\n            onClick={() =>\n              handleBooleanUpdate(\"inTheRoll\", inTheRoll, setInTheRoll)\n            }\n          />\n        </div>\n      </div>\n    );\n  }\n};\n\nexport default PlayerCard;\n","/home/scott/coding/rollmein/packages/frontend/src/components/RollByRole.tsx",["133"],"// eslint-disable-next-line\nimport React, { useState, useEffect } from \"react\";\nimport { PlayerObject } from \"../types/Interfaces\";\nimport RenderGroup from \"./RenderGroup\";\nimport { usePlayerData } from \"./providers/PlayerProvider\";\nimport { validCheck } from \"./utils/BaseAppLogic\";\nimport axios from \"axios\"\n\nconst RollByRole = () => {\n  const [tank, setTank] = useState<PlayerObject>();\n  const [healer, setHealer] = useState<PlayerObject>();\n  const [dps, setDps] = useState<Array<PlayerObject>>();\n\n  const { inGroup, setOutGroup, outGroup, valid, setValid } = usePlayerData()!;\n\n  const rollForGroup = async() => {\n    const {data} = await axios.get('/api/v1/rolls/rbr')\n    setTank(data.tank);\n    setHealer(data.healer);\n    setDps(data.dps);\n    setOutGroup(data.remainder);\n  };\n\n  useEffect(() => {\n    // const CurrentValid = validCheck(inGroup!);\n    // setValid(CurrentValid);\n  }, [inGroup, setValid]);\n\n  if (outGroup === undefined) {\n    return (\n      <>\n        <button disabled={!valid} onClick={rollForGroup}>\n          Roll by Role!\n        </button>\n      </>\n    );\n  } else {\n    return (\n      <>\n        <button disabled={!valid} onClick={rollForGroup}>\n          Roll!\n        </button>\n        <div>\n          {tank === undefined ? null : (\n            <>\n              <h3>Tank: </h3>\n              {tank.playerName}\n            </>\n          )}\n          {healer === undefined ? null : (\n            <>\n              <h3>Healer:</h3>\n              {healer.playerName}\n            </>\n          )}\n          <RenderGroup players={dps!} header={\"Dps\"} />\n          <RenderGroup players={outGroup!} header={\"Out of Current Roll\"} />\n        </div>\n      </>\n    );\n  }\n};\n\nexport default RollByRole;\n","/home/scott/coding/rollmein/packages/frontend/src/components/FreeForAllRoll.tsx",[],"/home/scott/coding/rollmein/packages/frontend/src/components/RoleLogoImage.tsx",[],["134","135"],"/home/scott/coding/rollmein/packages/frontend/src/components/RenderGroup.tsx",[],{"ruleId":"136","replacedBy":"137"},{"ruleId":"138","replacedBy":"139"},{"ruleId":"136","replacedBy":"137"},{"ruleId":"138","replacedBy":"139"},{"ruleId":"140","severity":1,"message":"141","line":49,"column":11,"nodeType":"142","messageId":"143","endLine":49,"endColumn":14},{"ruleId":"144","severity":1,"message":"145","line":95,"column":6,"nodeType":"146","endLine":95,"endColumn":21,"suggestions":"147"},{"ruleId":"140","severity":1,"message":"148","line":22,"column":7,"nodeType":"142","messageId":"143","endLine":22,"endColumn":44},{"ruleId":"144","severity":1,"message":"149","line":105,"column":6,"nodeType":"146","endLine":105,"endColumn":14,"suggestions":"150"},{"ruleId":"140","severity":1,"message":"151","line":6,"column":10,"nodeType":"142","messageId":"143","endLine":6,"endColumn":20},{"ruleId":"136","replacedBy":"152"},{"ruleId":"138","replacedBy":"153"},"no-native-reassign",["154"],"no-negated-in-lhs",["155"],"@typescript-eslint/no-unused-vars","'res' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'pullPlayersFromDb'. Either include it or remove the dependency array.","ArrayExpression",["156"],"'placeHolderArray' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'blankPlayer' and 'getPlayerFromDatabase'. Either include them or remove the dependency array.",["157"],"'validCheck' is defined but never used.",["154"],["155"],"no-global-assign","no-unsafe-negation",{"desc":"158","fix":"159"},{"desc":"160","fix":"161"},"Update the dependencies array to be: [authenticated, pullPlayersFromDb]",{"range":"162","text":"163"},"Update the dependencies array to be: [blankPlayer, cardId, getPlayerFromDatabase]",{"range":"164","text":"165"},[2530,2545],"[authenticated, pullPlayersFromDb]",[2950,2958],"[blankPlayer, cardId, getPlayerFromDatabase]"]